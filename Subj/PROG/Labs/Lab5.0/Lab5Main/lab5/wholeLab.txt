package managers;

import models.MusicBand;

import java.time.LocalDateTime;
import java.util.*;


public class CollectionManager {
    private int freeId = 1;
    private Map<Integer, MusicBand> musicBandsHashMap = new HashMap<>();
    private HashSet<MusicBand> collection = new HashSet<>();
    private LocalDateTime lastInitTime;
    private LocalDateTime lastSaveTime;
    private final DumpManager dumpManager;

    public CollectionManager(DumpManager dumpManager) {
        this.lastInitTime = null;
        this.lastSaveTime = null;
        this.dumpManager = dumpManager;
    }

    public HashSet<MusicBand> getCollection() {
        return collection;
    }

    public MusicBand getMusicBandById(int id) {
        return musicBandsHashMap.get(id);
    }

    public boolean isContain(MusicBand band) {
        return band != null && musicBandsHashMap.containsKey((int) band.getId());
    }


    public int getFreeId() {
        while (getMusicBandById(++freeId) != null) ;
        return freeId;
    }

    public boolean add(MusicBand band) {
        if (isContain(band)) return false;
        musicBandsHashMap.put((int) band.getId(), band);
        collection.add(band);
        lastInitTime = LocalDateTime.now();
        return true;
    }

    public void saveCollection() {
        dumpManager.writeCollection(collection);
        lastSaveTime = LocalDateTime.now();
    }



    @Override
    public String toString() {
        if (collection.isEmpty()) return "Коллекция пуста!";

        StringBuilder info = new StringBuilder();
        info.append("----Информация о коллекции----\n");
        info.append("Тип коллекции: ").append(collection.getClass()).append("\n");
        info.append("Дата инициализации: ").append(lastInitTime).append("\n");
        info.append("Дата последнего сохранения: ").append(lastSaveTime).append("\n");
        info.append("Количество элементов: ").append(collection.size()).append("\n");

        return info.toString();
    }
}
package managers;

import commands.Command;

import java.util.*;

public class CommandManager {
    private final Map<String, Command> commands = new LinkedHashMap<>();
    private final List<String> commandHistory = new ArrayList<>();


    public void addCommand(String name, Command command) {
        commands.put(name, command);
    }

    public void addCommandToHistory(String command) {
        commandHistory.add(command);
    }

    public Collection<Command> getCommands() {
        return commands.values();
    }

    public Map<String, Command> getCommandsMap() {
        return commands;
    }

    public List<String> getCommandHistory() {
        return commandHistory;
    }

}
package managers;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import models.MusicBand;
import utility.Console;

import java.io.*;
import java.util.Collection;
import java.util.HashSet;


public class DumpManager {
    private Gson gson = new GsonBuilder()
            .setPrettyPrinting()
            .serializeNulls()
            .create();
//            .registerTypeAdapter(LocalDate.class, new LocalDateAdapter())


    private String fileName;
    private Console console;

    public DumpManager(String fileName, Console console) {

        this.fileName = fileName;
        this.console = console;
    }

    public void writeCollection(Collection<MusicBand> collection) {
        try (OutputStreamWriter fw = new OutputStreamWriter(new FileOutputStream(fileName), "UTF-8")) {
            var collectionType = new TypeToken<Collection<MusicBand>>() {
            }.getType();
            String json = gson.toJson(collection, collectionType);
            fw.write(json);
        } catch (IOException e) {
            console.printError("Не удается открыть указанный файл!");
        }
    }

    public Collection<MusicBand> readCollection() {
        if (fileName != null && !fileName.isEmpty()) {
            try (var fileReader = new FileReader(fileName)) {
                var collectionType = new TypeToken<HashSet<MusicBand>>() {
                }.getType();
                BufferedReader reader = new BufferedReader(fileReader);
                StringBuilder jsonString = new StringBuilder();

                String line;
                while ((line = reader.readLine()) != null) {
                    line = line.trim();
                    if (!line.isEmpty()) {
                        jsonString.append(line);
                    }
                    if (jsonString.length() == 0) {
                        jsonString = new StringBuilder("[]");
                    }
                }
                HashSet<MusicBand> collection = gson.fromJson(jsonString.toString(), collectionType);
                System.out.println("Коллекция была успешно загружена из файла!");
                return collection;
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return new HashSet<>(); // чтобы не возникало NullPointerException, и можно было просто работать с пустой коллекцией, например добавлять в неё новые элементы
    }
}
package utility;

public interface Console {
    void print(Object obj);
    void println(Object obj);
    String readln();
    void printError(Object obj);
    void printPrompt();
}
package utility;

public class ExecutionResponse {
    boolean exitStatus;
    String message;

    public ExecutionResponse(boolean exitStatus, String message) {
        this.exitStatus = exitStatus;
        this.message = message;
    }

    public String getMessage() {
        return message;
    }

    @Override
    public String toString() {
        return String.valueOf(exitStatus)+";"+message;
    }
}
package utility;

import commands.Command;
import managers.CommandManager;

import java.util.NoSuchElementException;

public class Runner {
    private Console console;
    private final CommandManager commandManager;

    public Runner(Console console, CommandManager commandManager) {
        this.console = console;
        this.commandManager = commandManager;
    }

    public void interactiveMode() {
        try {
            ExecutionResponse commandStatus;
            String[] userCommand = {"", ""};
            while (true) {
                console.printPrompt();
                userCommand = (console.readln() + " ").split(" ", 2);
                userCommand[0] = userCommand[0].toLowerCase().trim();
                commandManager.addCommandToHistory(userCommand[0]);
                commandStatus = run(userCommand);
                if (userCommand[0].equals("exit")) break;
                console.println(commandStatus.getMessage());
            }
        } catch (NoSuchElementException e) {
            console.printError(e.getMessage());
        }
    }

    public ExecutionResponse run(String[] userCommand) {
        if (userCommand[0].isEmpty()) return new ExecutionResponse(true, "");
        Command command = commandManager.getCommandsMap().get(userCommand[0]);
        if (command == null)
            return new ExecutionResponse(true, "Команда '" + userCommand[0] + "' не найдена. Наберите 'help' для справки");
        return command.execute(userCommand);
    }
}
package utility;

import java.util.Scanner;

public class StandartConsole implements Console{
    private static final String PROMPT = "$ ";
    private static final Scanner consoleScanner = new Scanner(System.in);



    @Override
    public void print(Object obj) {
        System.out.print(obj);
    }

    @Override
    public void println(Object obj) {
        System.out.println(obj);
    }

    @Override
    public String readln() {
        return consoleScanner.nextLine();
    }




    @Override
    public void printError(Object obj) {
        System.err.println("Error: " + obj);
    }


    @Override
    public void printPrompt() {
        System.out.print(PROMPT);
    }
}
package utility;

public interface Validatable {
    boolean isValid();
}
package models;

import utility.Validatable;

public class Album implements Validatable {
    private String name; //Поле не может быть null, Строка не может быть пустой
    private Long tracks; //Поле не может быть null, Значение поля должно быть больше 0
    private long length; //Значение поля должно быть больше 0
    private Double sales; //Поле не может быть null, Значение поля должно быть больше 0 //////Double

    public Album(String name, Long tracks, long length, Double sales) { //////Double
        this.name = name;
        this.tracks = tracks;
        this.length = length;
        this.sales = sales;
    }

    @Override
    public boolean isValid() {
        if (name == null || name.isEmpty()) return false;
        if (tracks == null || tracks <= 0) return false;
        if (length <= 0) return false;
        if (sales == null || sales <= 0) return false;
        return true;
    }

    @Override
    public String toString() {
        return "\"bestAlbum\": {" +
                    "\"name\":" + name + "," +
                    "\"tracks\":" + tracks + "," +
                    "\"length\":" + length + "," +
                    "\"sales\":" + sales +
                "}";
    }
}

package models;

import utility.Console;


import java.text.SimpleDateFormat;
import java.time.format.DateTimeParseException;
import java.util.Date;
import java.util.NoSuchElementException;

public class Ask {
    public static class AskBreak extends Exception {}

    public static MusicBand askMusicBand(Console console, long id) throws AskBreak {
        try {
            String name;
            while (true) {
                console.print("name: ");
                name = console.readln().trim();
                if (name.equals("exit")) throw new AskBreak();
                if (name.isEmpty()) continue;
                if (!hasNoDigits(name)) continue;
                break;
            }
            var coordinates = askCoordinates(console);
            Long numberOfParticipants = askNumberOfParticipants(console);
            Long singlesCount = askSinglesCount(console);
            Date establishmentDate = askEstablishmentDate(console);
            var musicGenre = askMusicGenre(console);
            var bestAlbum = askAlbum(console);

            return new MusicBand(name, coordinates, numberOfParticipants, singlesCount, establishmentDate, musicGenre, bestAlbum); //id!
        } catch (NoSuchElementException | IllegalStateException e) {
            console.printError("Ошибка чтения");
            return null;
        }
    }
    public static Coordinates askCoordinates(Console console) throws AskBreak {
        try {
            Integer x;
            while (true){
                console.print("coordinates.x: ");
                var line = console.readln().trim();
                if (line.equals("exit")) throw new AskBreak();
                if (!line.isEmpty()) {
                    try {
                        x = Integer.parseInt(line);
                        break;
                    } catch (NumberFormatException e) {}
                }
            }
            float y;
            while (true){
                console.print("coordinates.y: ");
                var line = console.readln().trim();
                if (line.equals("exit")) throw new AskBreak();
                if (line.isEmpty()) continue;
                try {
                    y = Float.parseFloat(line);
                    if (y > 751) continue;
                    break;
                } catch (NumberFormatException e) {}
            }
            return new Coordinates(x, y);
        } catch (Exception e) {
            console.printError("Ошибка чтения");
            return null;
        }
    }

    public static Long askNumberOfParticipants(Console console) throws AskBreak {
        try {
            Long numberOfParticipants;
            while (true){
                console.print("numberOfParticipants: ");
                var line = console.readln().trim();
                if (line.equals("exit")) throw new AskBreak();
                if (line.isEmpty()) continue;
                try {
                    numberOfParticipants = Long.parseLong(line);
                    if (numberOfParticipants <= 0) continue;
                    break;
                } catch (NumberFormatException e) {}
            }
            return numberOfParticipants;
        } catch (Exception e) {
            console.printError("Ошибка чтения");
            return null;
        }
    }

    public static Long askSinglesCount(Console console) throws AskBreak {
        try {
            Long singlesCount;
            while (true){
                console.print("singlesCount: ");
                var line = console.readln().trim();
                if (line.equals("exit")) throw new AskBreak();
                if (line.isEmpty()) continue;
                try {
                    singlesCount = Long.parseLong(line);
                    if (singlesCount <= 0) continue;
                    break;
                } catch (NumberFormatException e) {}
            }
            return singlesCount;
        } catch (Exception e) {
            console.printError("Ошибка чтения");
            return null;
        }
    }
    public static Date askEstablishmentDate(Console console) throws AskBreak {
        try {
            Date establishmentDate;
            while (true){
                console.print("data-time (dd.MM.yyyy): ");
                var line = console.readln().trim();
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy");
                if (line.equals("exit")) throw new AskBreak();
                if (line.isEmpty()) continue;
                try {
                    establishmentDate = dateFormat.parse(line); // ????????????? Thu Aug 03 00:00:00 MSD 2006
                    break;
                } catch (DateTimeParseException e) {}
            }
            return establishmentDate;
        } catch (Exception e) {
            console.printError("Ошибка чтения");
            return null;
        }
    }

    public static MusicGenre askMusicGenre(Console console) throws AskBreak {
        try {
            MusicGenre musicGenre;
            while (true){
                console.print("musicGenre (" + MusicGenre.names() + "): ");
                var line = console.readln().trim();
                if (line.equals("exit")) throw new AskBreak();
                if (line.isEmpty()) continue;
                try {
                    musicGenre = MusicGenre.valueOf(line);
                    break;
                } catch (IllegalArgumentException e) {}
            }
            return musicGenre;
        } catch (Exception e) {
            console.printError("Ошибка чтения");
            return null;
        }
    }

    public static Album askAlbum(Console console) throws AskBreak {
        try {
            String name;
            while (true){
                console.print("album.name: ");
                var line = console.readln().trim();
                if (line.equals("exit")) throw new AskBreak();
                if (line.isEmpty()) continue;
                name = line;
                if (!hasNoDigits(name)) continue;
                break;
            }
            Long tracks;
            while (true){
                console.print("album.tracks: ");
                var line = console.readln().trim();
                if (line.equals("exit")) throw new AskBreak();
                if (line.isEmpty()) continue;
                try {
                    tracks = Long.parseLong(line);
                    if (tracks <= 0) continue;
                    break;
                } catch (NumberFormatException e) {}
            }
            long length;
            while (true){
                console.print("album.length: ");
                var line = console.readln().trim();
                if (line.equals("exit")) throw new AskBreak();
                if (line.isEmpty()) continue;
                try {
                    length = Long.parseLong(line);
                    if (length <= 0) continue;
                    break;
                } catch (NumberFormatException e) {}
            }
            Double sales;
            while (true){
                console.print("album.sales: ");
                var line = console.readln().trim();
                if (line.equals("exit")) throw new AskBreak();
                if (line.isEmpty()) continue;
                try {
                    sales = Double.parseDouble(line);
                    if (sales <= 0) continue;
                    break;
                } catch (NumberFormatException e) {}
            }
            return new Album(name, tracks, length, sales);
        } catch (Exception e) {
            console.printError("Ошибка чтения");
            return null;
        }
    }

    private static boolean hasNoDigits(String str) {
        return str.replaceAll("[0-9]", "").equals(str);
    }
}
package models;

import utility.Validatable;

public class Coordinates implements Validatable {
    private Integer x; //Поле не может быть null
    private float y; //Максимальное значение поля: 751

    public Coordinates(Integer x, float y) {
        this.x = x;
        this.y = y;
    }

    public Coordinates(String s) {
        try {
            try {
                this.x = Integer.parseInt(s.split(";")[0]);
            } catch (NumberFormatException e) {
            }
            try {
                this.y = Float.parseFloat(s.split(";")[1]);
            } catch (NumberFormatException e) {
            }
        } catch (ArrayIndexOutOfBoundsException e) {
        }
    }

    @Override
    public boolean isValid() {
        if (x == null) return false;
        if (y > 751) return false;
        return true;
    }

    @Override
    public String toString() {
        return x + ";" + y;
    }

}
package models;

import utility.Validatable;

import java.time.LocalDate;
import java.util.Date;
import java.util.Objects;

public class MusicBand implements Comparable<MusicBand>, Validatable {


    private long id; //Значение поля должно быть больше 0, Значение этого поля должно быть уникальным, Значение этого поля должно генерироваться автоматически
    private String name; //Поле не может быть null, Строка не может быть пустой
    private Coordinates coordinates; //Поле не может быть null
    private String creationDate; //Поле не может быть null, Значение этого поля должно генерироваться автоматически
    private Long numberOfParticipants; //Поле может быть null, Значение поля должно быть больше 0
    private Long singlesCount; //Поле не может быть null, Значение поля должно быть больше 0
    private java.util.Date establishmentDate; //Поле может быть null
    private MusicGenre genre; //Поле не может быть null
    private Album bestAlbum; //Поле не может быть null


    public MusicBand(long id, String name, Coordinates coordinates, String creationDate, Long numberOfParticipants, Long singlesCount, Date establishmentDate, MusicGenre genre, Album bestAlbum) {
        this.id = id;
        this.name = name;
        this.coordinates = coordinates;
        this.creationDate = LocalDate.now().toString();
        this.numberOfParticipants = numberOfParticipants;
        this.singlesCount = singlesCount;
        this.establishmentDate = establishmentDate;
        this.genre = genre;
        this.bestAlbum = bestAlbum;
    }

    public MusicBand(String name, Coordinates coordinates, Long numberOfParticipants, Long singlesCount, Date establishmentDate, MusicGenre genre, Album bestAlbum) {
        this.name = name;
        this.coordinates = coordinates;
        this.numberOfParticipants = numberOfParticipants;
        this.singlesCount = singlesCount;
        this.establishmentDate = establishmentDate;
        this.genre = genre;
        this.bestAlbum = bestAlbum;
    }




    public long getId() {
        return id;
    }

    @Override
    public boolean isValid() {
        if (name == null || name.isEmpty()) return false;
        if (coordinates == null || !coordinates.isValid()) return false;
        if (creationDate == null) return false;
        if (numberOfParticipants == null || numberOfParticipants <= 0) return false;
        if (singlesCount == null || singlesCount <= 0) return false;
        if (establishmentDate == null) return false;
        if (genre == null) return false;
        if (bestAlbum == null || !bestAlbum.isValid()) return false;
        return true;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Coordinates getCoordinates() {
        return coordinates;
    }

    public void setCoordinates(Coordinates coordinates) {
        this.coordinates = coordinates;
    }

    public String getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(LocalDate creationDate) {
        this.creationDate = LocalDate.now().toString();
    }

    public Long getNumberOfParticipants() {
        return numberOfParticipants;
    }

    public void setNumberOfParticipants(Long numberOfParticipants) {
        this.numberOfParticipants = numberOfParticipants;
    }

    public Long getSinglesCount() {
        return singlesCount;
    }

    public void setSinglesCount(Long singlesCount) {
        this.singlesCount = singlesCount;
    }

    public Date getEstablishmentDate() {
        return establishmentDate;
    }

    public void setEstablishmentDate(Date establishmentDate) {
        this.establishmentDate = establishmentDate;
    }

    public MusicGenre getGenre() {
        return genre;
    }

    public void setGenre(MusicGenre genre) {
        this.genre = genre;
    }

    public Album getBestAlbum() {
        return bestAlbum;
    }

    public void setBestAlbum(Album bestAlbum) {
        this.bestAlbum = bestAlbum;
    }

    @Override
    public int compareTo(MusicBand band) {
        return Long.compare(this.id, band.getId());
    }

    @Override
    public String toString() {
        return "models.MusicBand{\"id\": " + id + ", " +
                "\"name\": \"" + name + "\", " +
                "\"coordinates\": \"" + coordinates + "\", " +
                "\"creationDate\": \"" + creationDate + "\", " +
                "\"numberOfParticipants\": \"" + numberOfParticipants + "\", " +
                "\"singlesCount\": \"" + singlesCount + "\", " +
                "\"establishmentDate\": \"" + establishmentDate + "\", " +
                "\"genre\": \"" + genre + "\", " +
                "\"bestAlbum\": \"" + bestAlbum + "\"}";

    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        MusicBand band = (MusicBand) o;
        return Objects.equals(id, band.id);
    }
}
package models;

public enum MusicGenre {
    PROGRESSIVE_ROCK,
    HIP_HOP,
    POP;

    public static String names() {
        StringBuilder nameList = new StringBuilder();
        for (var musicGenre : values()) {
            nameList.append(musicGenre.name()).append(", ");
        }
        return nameList.substring(0, nameList.length() - 2);
    }
}
package commands;

import managers.CollectionManager;
import models.Ask;
import models.MusicBand;
import utility.Console;
import utility.ExecutionResponse;

public class Add extends Command {
    private final Console console;
    private final CollectionManager collectionManager;

    public Add(Console console, CollectionManager collectionManager) {
        super("add", "добавить новый элемент в коллекцию");
        this.console = console;
        this.collectionManager = collectionManager;
    }

    @Override
    public ExecutionResponse execute(String[] args) {
        try {
            if (!args[1].isEmpty())
                return new ExecutionResponse(false, "Неправильное количество аргументов!\nИспользование: '" + getName() + "'");
            console.println("----Cоздание новой MusicBand----\n");
            MusicBand band = Ask.askMusicBand(console, collectionManager.getFreeId());

            if (band != null) {
                collectionManager.add(band);
                return new ExecutionResponse(true, "MusicBand была успешно добалена");
            } else {
                return new ExecutionResponse(false, "Поля MusicBand не валидны, MusicBand не создана!");
            }
        } catch (Ask.AskBreak e) {
            return new ExecutionResponse(false, "Отмена ввода...");
        }
    }
}
package commands;

import managers.CollectionManager;
import utility.Console;
import utility.ExecutionResponse;

public class Clear extends Command {
    private final Console console;
    private final CollectionManager collectionManager;
    public Clear(Console console, CollectionManager collectionManager) {
        super("clear", "очистить коллекцию");
        this.console = console;
        this.collectionManager = collectionManager;
    }

    @Override
    public ExecutionResponse execute(String[] args) {
        if (!args[1].isEmpty())  return new ExecutionResponse(false, "Неправильное количество аргументов!\nИспользование: '" + getName() + "'");
        collectionManager.getCollection().clear();
        return new ExecutionResponse(true, "Коллекция была очищена!");
    }
}
package commands;

import utility.ExecutionResponse;

public abstract class Command {
    public final String name;
    public final String description;
    public Command(String command, String description) {
        this.name = command;
        this.description = description;
    }

    public abstract ExecutionResponse execute(String[] args);

    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }
}
package commands;

import managers.CommandManager;
import utility.Console;
import utility.ExecutionResponse;

public class Help extends Command {
    private final Console console;
    private final CommandManager commandManager;
    public Help(Console console, CommandManager commandManager) {
        super("help", "вывести справку по доступным командам");
        this.console = console;
        this.commandManager = commandManager;
    }

    @Override
    public ExecutionResponse execute(String[] args) {
        StringBuilder s = new StringBuilder();
        if (!args[1].isEmpty()) return new ExecutionResponse(false, "Неправильное количество аргументов!\nИспользование: '" + getName() + "'");
        s.append("----Доступные команды----\n");
        for (Command command : commandManager.getCommands()){
            s.append(command.getName()).append(": ").append(command.getDescription()).append("\n");
        }
        return new ExecutionResponse(true, s.toString());
    }
}
package commands;

import managers.CollectionManager;
import utility.Console;
import utility.ExecutionResponse;

public class Info extends Command {
    private final Console console;
    private final CollectionManager collectionManager;

    public Info(Console console, CollectionManager collectionManager) {
        super("info", "вывести в стандартный поток вывода информацию о коллекции");
        this.console = console;
        this.collectionManager = collectionManager;
    }

    @Override
    public ExecutionResponse execute(String[] args) {
        if (!args[1].isEmpty()) return new ExecutionResponse(false, "Неправильное количество аргументов!\nИспользование: '" + getName() + "'");
        return new ExecutionResponse(true, collectionManager.toString());
    }
}
package commands;

import managers.CollectionManager;
import utility.Console;
import utility.ExecutionResponse;

public class Save extends Command {
    private final Console console;
    private final CollectionManager collectionManager;
    public Save(Console console, CollectionManager collectionManager) {
        super("save", "сохранить коллекцию в файл");
        this.console = console;
        this.collectionManager = collectionManager;
    }

    @Override
    public ExecutionResponse execute(String[] args) {
        if (!args[1].isEmpty()) return new ExecutionResponse(false, "Неправильное количество аргументов!\nИспользование: '" + getName() + "'");
        collectionManager.saveCollection();
        return new ExecutionResponse(true, "Коллекция была сохранена!");
    }
}
import commands.*;
import managers.CollectionManager;
import managers.CommandManager;
import managers.DumpManager;
import models.Ask;
import utility.Console;
import utility.Runner;
import utility.StandartConsole;


public class Main {

    public static void main(String[] args) throws Ask.AskBreak {
        Console console = new StandartConsole();
        if (args.length == 0) {
            console.println("Введите имя загружаемого файла как аргумент командной строки");
            System.exit(1);
        }

        CommandManager commandManager = new CommandManager();
        DumpManager dumpManager = new DumpManager(args[0], console);
        CollectionManager collectionManager = new CollectionManager(dumpManager);
        commandManager.addCommand("add", new Add(console, collectionManager));
        commandManager.addCommand("help", new Help(console, commandManager));
        commandManager.addCommand("info", new Info(console, collectionManager));
        commandManager.addCommand("clear",new Clear(console, collectionManager));
        commandManager.addCommand("save", new Save(console, collectionManager));
        Runner runner = new Runner(console, commandManager);
        runner.interactiveMode();
    }
}
