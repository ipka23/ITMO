Index: src/main/webapp/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>let x\r\nlet yValues\r\nlet r\r\nlet form\r\nlet submitButton\r\nlet rInput\r\nlet svg\r\nlet rPxSize\r\nconst svgCenterX = 150\r\nconst svgCenterY = 150\r\nlet scale\r\nlet dot\r\nlet previousR\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n    // svg params\r\n    svg = document.getElementById(\"svg\")\r\n    rPxSize = svg.clientWidth / 3\r\n\r\n\r\n    form = document.getElementById(\"form\")\r\n    submitButton = document.getElementById(\"submitButton\")\r\n    submitButton.addEventListener(\"click\", sendPoint)\r\n    rInput = document.getElementById(\"inputR\")\r\n    rInput.addEventListener(\"input\", function (e) {\r\n        const newR = e.target.value\r\n        if (newR === \"\" || isNaN(newR) || newR === undefined) return\r\n        if (rInput.value === \"\" || isNaN(rInput.value) || rInput.value === undefined) return;\r\n        changeRadius(previousR, newR)\r\n        console.log(`evL previous: ${previousR}, new: ${newR}`)\r\n        r = newR\r\n        previousR = newR\r\n    })\r\n    // rInput.addEventListener(\"change\", changeRadius)\r\n    svg.addEventListener(\"click\", drawByClick)\r\n    loadPoints()\r\n})\r\n// if (localStorage.length !== 0) {\r\n//     loadTableFromLocalStorage()\r\n// }\r\n//\r\n// function sendStorageLength() {\r\n//     makeFetch(\"GET\", `storageLength=${localStorage.length}`)\r\n// }\r\n//\r\n// function sendStorageItem(jsonItem) {\r\n//     makeFetch('POST', jsonItem, 'application/json')\r\n// }\r\n\r\nfunction makeFetch(method, body, contentType) {\r\n    if (method === \"POST\") {\r\n        alert(\"Ошибка: Введите GET запрос!\")\r\n    } else if (method === \"GET\") {\r\n        if (body.drawByClick === false) {\r\n            console.log(body)\r\n            fetch(`http://localhost:25230/lab2/controller?x=${body.x}&y=${body.y}&r=${body.r}`, {\r\n                method: \"GET\"\r\n                // }).then(response => response.json())\r\n                //     .then(json => {\r\n                //         // console.log(json)\r\n                //         // if (window.location.href !== \"http://localhost:25230/lab2/\") {\r\n                //         //     window.location.href = \"http://localhost:25230/lab2/\"\r\n                //         // }\r\n                //         if (json.status !== \"error\") {\r\n                //             let point = jsonToDict(json)\r\n                //             hit(point.x, point.y, point.r, point.status)\r\n                //             updateTable(point, true)\r\n                //         } else {\r\n                //             console.log(json)\r\n                //             return json\r\n                //         }\r\n\r\n                // window.location.href = \"http://localhost:25230/lab2/result\"\r\n            }).then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(`${response.status}`)\r\n                } else {\r\n                    return response.text()\r\n                }\r\n            }).then(resultHtml => {\r\n                document.open()\r\n                document.write(resultHtml)\r\n                document.close()\r\n            }).catch(error => {\r\n                alert(\"Ошибка: \" + error.toString())\r\n            })\r\n\r\n        } else {\r\n            fetch(`http://localhost:25230/lab2/controller?x=${body.x}&y=${body.y}&r=${body.r}&drawByClick=${body.drawByClick}`, {\r\n                method: \"GET\"\r\n            }).then(response => response.json())\r\n                .then(json => {\r\n                    console.log(json)\r\n                    if (json.status !== \"error\") {\r\n                        let point = jsonToDict(json)\r\n                        hit(point.x, point.y, point.r)\r\n                        updateTable(point, true)\r\n                    } else {\r\n                        console.log(json)\r\n                    }\r\n                }).catch(error => {\r\n                alert(\"Ошибка: \" + error.toString())\r\n            })\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction errorMessage(elementId, inputField, message) {\r\n    let error = document.getElementById(elementId)\r\n    error.innerHTML = \"<span style='color: red; animation: 3s fadeOut ease-in forwards'>\" +\r\n        `${message}</span>`\r\n\r\n    if (message !== undefined && inputField !== undefined && inputField !== \"inputY\") {\r\n        document.getElementById(inputField).value = \"\"\r\n    }\r\n}\r\n\r\nfunction hit(x, y, r) {\r\n    dot = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\")\r\n    scale = rPxSize / r\r\n    dot.setAttributeNS(null, \"r\", \"1%\")\r\n    setPointXY(x, y, dot, scale)\r\n    changeColor(x, y, r, dot)\r\n    dot.setAttributeNS(null, \"visibility\", \"visible\")\r\n    svg.appendChild(dot)\r\n}\r\n\r\nfunction setPointXY(x, y, point, scale) {\r\n    console.log(`PointXY (x, y, point, scale): ${x} ${y} ${point} ${scale}`)\r\n    point.setAttributeNS(null, \"cx\", (svgCenterX + x * scale).toString())\r\n    point.setAttributeNS(null, \"cy\", (svgCenterY - y * scale).toString())\r\n}\r\n\r\nfunction changePointR(oldR, newR) {\r\n    let points = document.querySelectorAll(\"circle\")\r\n    for (let i = 0; i < points.length; i++) {\r\n        let p = points[i]\r\n        let svgX = +p.getAttributeNS(null, \"cx\")\r\n        let svgY = +p.getAttributeNS(null, \"cy\")\r\n        console.log(`svg: ${svgX} ${svgY}`)\r\n        let mathCoords = svgToMathCoords(svgX, svgY, oldR)\r\n        let x = +mathCoords.x\r\n        let y = +mathCoords.y\r\n        console.log(`math: ${x} ${x}`)\r\n        scale = rPxSize / newR\r\n        setPointXY(x, y, p, scale)\r\n\r\n        changeColor(x, y, newR, p)\r\n    }\r\n}\r\n\r\nfunction loadPoints() {\r\n    let points = document.querySelectorAll(\"circle\")\r\n    for (let i = 0; i < points.length; i++) {\r\n        let p = points[i]\r\n        if (r === undefined) {\r\n            resetColor(p)\r\n        }\r\n    }\r\n}\r\n\r\nfunction changeColor(x, y, r, point) {\r\n    let hitFlag = checkHit(x, y, r)\r\n    if (hitFlag) {\r\n        point.setAttributeNS(null, \"fill\", \"green\")\r\n    } else {\r\n        point.setAttributeNS(null, \"fill\", \"red\")\r\n    }\r\n}\r\n\r\nfunction resetColor(point) {\r\n    point.setAttributeNS(null, \"fill\", \"black\")\r\n}\r\n\r\nfunction changeRadius(oldR, newR) {\r\n    let r = newR\r\n    // let currentR = rInput.value\r\n    console.log(`old: ${oldR}, new: ${r}`)\r\n    document.getElementById(\"-rx\").textContent = `-${r}`\r\n    document.getElementById(\"-ry\").textContent = `-${r}`\r\n    document.getElementById(\"-rx/2\").textContent = `-${r / 2}`\r\n    document.getElementById(\"-ry/2\").textContent = `-${r / 2}`\r\n    document.getElementById(\"rx\").textContent = `${r}`\r\n    document.getElementById(\"ry\").textContent = `${r}`\r\n    document.getElementById(\"rx/2\").textContent = `${r / 2}`\r\n    document.getElementById(\"ry/2\").textContent = `${r / 2}`\r\n    changePointR(oldR, newR) /// fix\r\n}\r\n\r\n\r\nfunction updateTable(dict, firstAdd) {\r\n    const table = document.getElementById(\"statsTable\")\r\n    const row = table.insertRow()\r\n    const xCell = row.insertCell(0)\r\n    const yCell = row.insertCell(1)\r\n    const rCell = row.insertCell(2)\r\n    const statusCell = row.insertCell(3)\r\n    const dateCell = row.insertCell(4)\r\n    const executionTimeCell = row.insertCell(5)\r\n    xCell.style.maxWidth = '15px'\r\n    yCell.style.maxWidth = '15px'\r\n    rCell.style.maxWidth = '15px'\r\n\r\n    if (dict[\"x\"].length > 5) {\r\n        yCell.title = dict[\"y\"]\r\n        yCell.style.overflow = \"hidden\"\r\n        dict[\"x\"] = dict[\"x\"].substring(0, 5) + \"...\"\r\n    }\r\n    xCell.textContent = dict[\"x\"]\r\n\r\n    if (dict[\"y\"].length > 5) {\r\n        yCell.title = dict[\"y\"]\r\n        yCell.style.overflow = \"hidden\"\r\n        dict[\"y\"] = dict[\"y\"].substring(0, 5) + \"...\"\r\n    }\r\n    yCell.textContent = dict[\"y\"]\r\n\r\n    if (dict[\"r\"].length > 5) {\r\n        rCell.title = dict[\"r\"]\r\n        rCell.style.overflow = \"hidden\"\r\n        dict[\"r\"] = dict[\"r\"].substring(0, 5) + \"...\"\r\n    }\r\n    rCell.textContent = dict[\"r\"]\r\n\r\n    statusCell.textContent = dict[\"status\"]\r\n    dateCell.textContent = dict[\"currentTime\"]\r\n    executionTimeCell.textContent = dict[\"executionTime\"]\r\n    // if (firstAdd) {\r\n    //     updateLocalStorage(localStorage.length, dict)\r\n    // }\r\n}\r\n\r\n//\r\n// function updateLocalStorage(index, dict) {\r\n//     let item = dictToString(dict)\r\n//     console.log(`index: ${localStorage.length}\\nitem: ${item}`)\r\n//     localStorage.setItem(index.toString(), item)\r\n// }\r\n//\r\n// function dictToString(dict) {\r\n//     return `x: ${dict[\"x\"]},\r\n//             y: ${dict[\"y\"]},\r\n//             r: ${dict[\"r\"]},\r\n//             status: ${dict[\"status\"]},\r\n//             currentTime: ${dict[\"currentTime\"]},\r\n//             executionTime: ${dict[\"executionTime\"]}`\r\n// }\r\n\r\n// function stringToDict(string) {\r\n//     let statsList = string.split(\",\\n\")\r\n//     let dictItem = {}\r\n//     for (let i = 0; i < statsList.length; i++) {\r\n//         let keyVal = statsList[i].split(\": \")\r\n//         let key = keyVal[0].trim()\r\n//         let value = keyVal[1].trim()\r\n//         dictItem[key] = value\r\n//\r\n//     }\r\n//     // console.log(`parsedDictItem: ${dictItem}`)\r\n//     return dictItem\r\n// }\r\n//\r\nfunction jsonToDict(json) {\r\n    let dict = {}\r\n    dict[\"x\"] = json.result.x\r\n    dict[\"y\"] = json.result.y\r\n    dict[\"r\"] = json.result.r\r\n    dict[\"status\"] = json.result.status\r\n    dict[\"currentTime\"] = json.result.currentTime\r\n    dict[\"executionTime\"] = json.result.executionTime\r\n    return dict\r\n}\r\n\r\n//\r\n// function dictToJson(dict) {\r\n//     let json = JSON.stringify(dict)\r\n//     console.log(json)\r\n//     return json\r\n// }\r\n//\r\n// function loadTableFromLocalStorage() {\r\n//     let storageLength = window.localStorage.length\r\n//     for (let i = 0; i < storageLength; i++) {\r\n//         let index = i.toString()\r\n//         let item = window.localStorage.getItem(index)\r\n//\r\n//         console.log(item)\r\n//         if (item === null) continue\r\n//         let dictItem = stringToDict(item)\r\n//         dictItem[\"index\"] = index\r\n//         // sendStorageItem(dictToJson(dictItem))\r\n//\r\n//         updateTable(dictItem, false)\r\n//         // hit(dictItem[\"x\"], dictItem[\"y\"], dictItem[\"r\"])\r\n//         console.log(`localStorageLineIndex: ${i} dictItem: ${dictItem}`)\r\n//     }\r\n// }\r\n\r\nfunction initYvalues() {\r\n    let yItems = form.y\r\n    let checkedValues = []\r\n    for (let i = 0; i < yItems.length; i++) {\r\n        let y = yItems[i]\r\n        if (y.checked) {\r\n            checkedValues.push(y.value)\r\n        }\r\n    }\r\n    return checkedValues\r\n}\r\n\r\nfunction svgToMathCoords(svgX, svgY, r) {\r\n    const scale = rPxSize / r\r\n    return {\r\n        x: ((svgX - svgCenterX) / scale).toFixed(2),\r\n        y: ((svgCenterY - svgY) / scale).toFixed(2)\r\n    }\r\n}\r\n\r\nfunction drawByClick(e) {\r\n    const r = rInput.value\r\n    const absoluteX = e.clientX\r\n    const absoluteY = e.clientY\r\n    const absolutePoint = svg.createSVGPoint()\r\n    absolutePoint.x = absoluteX\r\n    absolutePoint.y = absoluteY\r\n    const svgPoint = absolutePoint.matrixTransform(svg.getScreenCTM().inverse())\r\n    const svgX = svgPoint.x\r\n    const svgY = svgPoint.y\r\n\r\n    const coords = svgToMathCoords(svgX, svgY, r)\r\n\r\n    if (r === undefined || r === \"\") {\r\n        errorMessage(\"svgError\", undefined, \"Невозможно определить координаты точки! Введите R!\")\r\n    } else {\r\n        makeFetch(\"GET\", {x: coords.x, y: coords.y, r: r, drawByClick: true})\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction sendPoint(e) {\r\n    e.preventDefault()\r\n    const regexp = /^[-+]?[0-9]*[.,][0-9]+$|^[-+]?[0-9]+$/\r\n    x = document.getElementById(\"inputX\").value;\r\n    yValues = initYvalues()\r\n    r = rInput.value;\r\n    let successX = true\r\n    let successY = true\r\n    let successR = true\r\n    if (x === undefined) {\r\n        errorMessage(\"xError\", \"inputX\", \"Введите X!\")\r\n        successX = false\r\n    }\r\n\r\n    if (yValues.length === 0) {\r\n        errorMessage(\"yError\", \"inputY\", \"Выберите Y!\")\r\n        successY = false\r\n    }\r\n    if (r === undefined) {\r\n        errorMessage(\"rError\", \"inputR\", \"Введите R!\")\r\n        successR = false\r\n    }\r\n\r\n    if (!regexp.test(x) && successY) {\r\n        errorMessage(\"xError\", \"inputX\", \"Введите X в правильном формате!\")\r\n        successY = false\r\n    }\r\n    if (!regexp.test(r) && successR) {\r\n        errorMessage(\"rError\", \"inputR\", \"Введите R в правильном формате!\")\r\n        successR = false\r\n    }\r\n\r\n    if (!(-3 <= x && x <= 3) && successY) {\r\n        errorMessage(\"xError\", \"inputX\", \"Введите значение X в пределах [-3;3]!\")\r\n        successY = false\r\n    }\r\n    if (!(1 <= r && r <= 4) && successR) {\r\n        errorMessage(\"rError\", \"inputR\", \"Введите значение R в пределах [1;4]!\")\r\n        successR = false\r\n    } else if (successX && successY && successR) {\r\n\r\n        for (let i = 0; i < yValues.length; i++) {\r\n            let y = yValues[i]\r\n            makeFetch(\"GET\", {x: x, y: y, r: r, drawByClick: false}, 'application/x-www-form-urlencoded')\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nfunction checkHit(x, y, r) {\r\n    return checkCircle(x, y, r) || checkTriangle(x, y, r) || checkRectangle(x, y, r);\r\n}\r\n\r\nfunction checkTriangle(x, y, r) {\r\n    if (x <= 0 && y >= 0) {\r\n        return x > y - r && y < x + r;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction checkRectangle(x, y, r) {\r\n    if (x <= 0 && y <= 0) {\r\n        return x > -r / 2 && y > -r;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction checkCircle(x, y, r) {\r\n    if (x >= 0 && y <= 0) {\r\n        return Math.pow(x, 2) + Math.pow(y, 2) <= Math.pow(r, 2);\r\n    }\r\n    return false;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/index.js b/src/main/webapp/index.js
--- a/src/main/webapp/index.js	(revision ce348307d359d93738650239491229ba2f94634f)
+++ b/src/main/webapp/index.js	(date 1760993348920)
@@ -25,7 +25,7 @@
     rInput.addEventListener("input", function (e) {
         const newR = e.target.value
         if (newR === "" || isNaN(newR) || newR === undefined) return
-        if (rInput.value === "" || isNaN(rInput.value) || rInput.value === undefined) return;
+        if (rInput.value === "" || isNaN(rInput.value) || rInput.value === undefined) return
         changeRadius(previousR, newR)
         console.log(`evL previous: ${previousR}, new: ${newR}`)
         r = newR
