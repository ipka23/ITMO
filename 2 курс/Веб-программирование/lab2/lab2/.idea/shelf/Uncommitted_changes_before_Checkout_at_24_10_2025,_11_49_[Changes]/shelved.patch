Index: src/main/webapp/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>let x\nlet yValues\nlet r\nlet form\nlet submitButton\nlet rInput\nlet svg\nlet rPxSize\nconst svgCenterX = 150\nconst svgCenterY = 150\nlet scale\nlet dot\nlet previousR\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    // svg params\n    svg = document.getElementById(\"svg\")\n    rPxSize = svg.clientWidth / 3\n\n\n    form = document.getElementById(\"form\")\n    submitButton = document.getElementById(\"submitButton\")\n    submitButton.addEventListener(\"click\", sendPoint)\n    rInput = document.getElementById(\"inputR\")\n    rInput.addEventListener(\"input\", function (e) {\n        const newR = e.target.value\n        if (newR === \"\" || isNaN(newR) || newR === undefined) return\n        if (rInput.value === \"\" || isNaN(rInput.value) || rInput.value === undefined) return;\n        changeRadius(previousR, newR)\n        console.log(`evL previous: ${previousR}, new: ${newR}`)\n        r = newR\n        previousR = newR\n    })\n    // rInput.addEventListener(\"change\", changeRadius)\n    svg.addEventListener(\"click\", drawByClick)\n    loadPoints()\n})\n// if (localStorage.length !== 0) {\n//     loadTableFromLocalStorage()\n// }\n//\n// function sendStorageLength() {\n//     makeFetch(\"GET\", `storageLength=${localStorage.length}`)\n// }\n//\n// function sendStorageItem(jsonItem) {\n//     makeFetch('POST', jsonItem, 'application/json')\n// }\n\nfunction makeFetch(method, body, contentType) {\n    if (method === \"POST\") {\n        alert(\"Ошибка: Введите GET запрос!\")\n    } else if (method === \"GET\") {\n        if (body.drawByClick === false) {\n            console.log(body)\n            fetch(`http://localhost:25230/lab2/controller?x=${body.x}&y=${body.y}&r=${body.r}`, {\n                method: \"GET\"\n                // }).then(response => response.json())\n                //     .then(json => {\n                //         // console.log(json)\n                //         // if (window.location.href !== \"http://localhost:25230/lab2/\") {\n                //         //     window.location.href = \"http://localhost:25230/lab2/\"\n                //         // }\n                //         if (json.status !== \"error\") {\n                //             let point = jsonToDict(json)\n                //             hit(point.x, point.y, point.r, point.status)\n                //             updateTable(point, true)\n                //         } else {\n                //             console.log(json)\n                //             return json\n                //         }\n\n                // window.location.href = \"http://localhost:25230/lab2/result\"\n            }).then(response => {\n                if (!response.ok) {\n                    throw new Error(`${response.status}`)\n                } else {\n                    return response.text()\n                }\n            }).then(resultHtml => {\n                document.open()\n                document.write(resultHtml)\n                document.close()\n            }).catch(error => {\n                alert(\"Ошибка: \" + error.toString())\n            })\n\n        } else {\n            fetch(`http://localhost:25230/lab2/controller?x=${body.x}&y=${body.y}&r=${body.r}&drawByClick=${body.drawByClick}`, {\n                method: \"GET\"\n            }).then(response => response.json())\n                .then(json => {\n                    console.log(json)\n                    if (json.status !== \"error\") {\n                        let point = jsonToDict(json)\n                        hit(point.x, point.y, point.r)\n                        updateTable(point, true)\n                    } else {\n                        console.log(json)\n                    }\n                }).catch(error => {\n                alert(\"Ошибка: \" + error.toString())\n            })\n        }\n    }\n\n}\n\n\nfunction errorMessage(elementId, inputField, message) {\n    let error = document.getElementById(elementId)\n    error.innerHTML = \"<span style='color: red; animation: 3s fadeOut ease-in forwards'>\" +\n        `${message}</span>`\n\n    if (message !== undefined && inputField !== undefined && inputField !== \"inputY\") {\n        document.getElementById(inputField).value = \"\"\n    }\n}\n\nfunction hit(x, y, r) {\n    dot = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\")\n    scale = rPxSize / r\n    dot.setAttributeNS(null, \"r\", \"1%\")\n    setPointXY(x, y, dot, scale)\n    changeColor(x, y, r, dot)\n    dot.setAttributeNS(null, \"visibility\", \"visible\")\n    svg.appendChild(dot)\n}\n\nfunction setPointXY(x, y, point, scale) {\n    console.log(`PointXY (x, y, point, scale): ${x} ${y} ${point} ${scale}`)\n    point.setAttributeNS(null, \"cx\", (svgCenterX + x * scale).toString())\n    point.setAttributeNS(null, \"cy\", (svgCenterY - y * scale).toString())\n}\n\nfunction changePointR(oldR, newR) {\n    let points = document.querySelectorAll(\"circle\")\n    for (let i = 0; i < points.length; i++) {\n        let p = points[i]\n        let svgX = +p.getAttributeNS(null, \"cx\")\n        let svgY = +p.getAttributeNS(null, \"cy\")\n        console.log(`svg: ${svgX} ${svgY}`)\n        let mathCoords = svgToMathCoords(svgX, svgY, oldR)\n        let x = +mathCoords.x\n        let y = +mathCoords.y\n        console.log(`math: ${x} ${x}`)\n        scale = rPxSize / newR\n        setPointXY(x, y, p, scale)\n\n        changeColor(x, y, newR, p)\n    }\n}\n\nfunction loadPoints() {\n    let points = document.querySelectorAll(\"circle\")\n    for (let i = 0; i < points.length; i++) {\n        let p = points[i]\n        if (r === undefined) {\n            resetColor(p)\n        }\n    }\n}\n\nfunction changeColor(x, y, r, point) {\n    let hitFlag = checkHit(x, y, r)\n    if (hitFlag) {\n        point.setAttributeNS(null, \"fill\", \"green\")\n    } else {\n        point.setAttributeNS(null, \"fill\", \"red\")\n    }\n}\n\nfunction resetColor(point) {\n    point.setAttributeNS(null, \"fill\", \"black\")\n}\n\nfunction changeRadius(oldR, newR) {\n    let r = newR\n    // let currentR = rInput.value\n    console.log(`old: ${oldR}, new: ${r}`)\n    document.getElementById(\"-rx\").textContent = `-${r}`\n    document.getElementById(\"-ry\").textContent = `-${r}`\n    document.getElementById(\"-rx/2\").textContent = `-${r / 2}`\n    document.getElementById(\"-ry/2\").textContent = `-${r / 2}`\n    document.getElementById(\"rx\").textContent = `${r}`\n    document.getElementById(\"ry\").textContent = `${r}`\n    document.getElementById(\"rx/2\").textContent = `${r / 2}`\n    document.getElementById(\"ry/2\").textContent = `${r / 2}`\n    changePointR(oldR, newR) /// fix\n}\n\n\nfunction updateTable(dict, firstAdd) {\n    const table = document.getElementById(\"statsTable\")\n    const row = table.insertRow()\n    const xCell = row.insertCell(0)\n    const yCell = row.insertCell(1)\n    const rCell = row.insertCell(2)\n    const statusCell = row.insertCell(3)\n    const dateCell = row.insertCell(4)\n    const executionTimeCell = row.insertCell(5)\n    xCell.style.maxWidth = '15px'\n    yCell.style.maxWidth = '15px'\n    rCell.style.maxWidth = '15px'\n\n    if (dict[\"x\"].length > 5) {\n        yCell.title = dict[\"y\"]\n        yCell.style.overflow = \"hidden\"\n        dict[\"x\"] = dict[\"x\"].substring(0, 5) + \"...\"\n    }\n    xCell.textContent = dict[\"x\"]\n\n    if (dict[\"y\"].length > 5) {\n        yCell.title = dict[\"y\"]\n        yCell.style.overflow = \"hidden\"\n        dict[\"y\"] = dict[\"y\"].substring(0, 5) + \"...\"\n    }\n    yCell.textContent = dict[\"y\"]\n\n    if (dict[\"r\"].length > 5) {\n        rCell.title = dict[\"r\"]\n        rCell.style.overflow = \"hidden\"\n        dict[\"r\"] = dict[\"r\"].substring(0, 5) + \"...\"\n    }\n    rCell.textContent = dict[\"r\"]\n\n    statusCell.textContent = dict[\"status\"]\n    dateCell.textContent = dict[\"currentTime\"]\n    executionTimeCell.textContent = dict[\"executionTime\"]\n    // if (firstAdd) {\n    //     updateLocalStorage(localStorage.length, dict)\n    // }\n}\n\n//\n// function updateLocalStorage(index, dict) {\n//     let item = dictToString(dict)\n//     console.log(`index: ${localStorage.length}\\nitem: ${item}`)\n//     localStorage.setItem(index.toString(), item)\n// }\n//\n// function dictToString(dict) {\n//     return `x: ${dict[\"x\"]},\n//             y: ${dict[\"y\"]},\n//             r: ${dict[\"r\"]},\n//             status: ${dict[\"status\"]},\n//             currentTime: ${dict[\"currentTime\"]},\n//             executionTime: ${dict[\"executionTime\"]}`\n// }\n\n// function stringToDict(string) {\n//     let statsList = string.split(\",\\n\")\n//     let dictItem = {}\n//     for (let i = 0; i < statsList.length; i++) {\n//         let keyVal = statsList[i].split(\": \")\n//         let key = keyVal[0].trim()\n//         let value = keyVal[1].trim()\n//         dictItem[key] = value\n//\n//     }\n//     // console.log(`parsedDictItem: ${dictItem}`)\n//     return dictItem\n// }\n//\nfunction jsonToDict(json) {\n    let dict = {}\n    dict[\"x\"] = json.result.x\n    dict[\"y\"] = json.result.y\n    dict[\"r\"] = json.result.r\n    dict[\"status\"] = json.result.status\n    dict[\"currentTime\"] = json.result.currentTime\n    dict[\"executionTime\"] = json.result.executionTime\n    return dict\n}\n\n//\n// function dictToJson(dict) {\n//     let json = JSON.stringify(dict)\n//     console.log(json)\n//     return json\n// }\n//\n// function loadTableFromLocalStorage() {\n//     let storageLength = window.localStorage.length\n//     for (let i = 0; i < storageLength; i++) {\n//         let index = i.toString()\n//         let item = window.localStorage.getItem(index)\n//\n//         console.log(item)\n//         if (item === null) continue\n//         let dictItem = stringToDict(item)\n//         dictItem[\"index\"] = index\n//         // sendStorageItem(dictToJson(dictItem))\n//\n//         updateTable(dictItem, false)\n//         // hit(dictItem[\"x\"], dictItem[\"y\"], dictItem[\"r\"])\n//         console.log(`localStorageLineIndex: ${i} dictItem: ${dictItem}`)\n//     }\n// }\n\nfunction initYvalues() {\n    let yItems = form.y\n    let checkedValues = []\n    for (let i = 0; i < yItems.length; i++) {\n        let y = yItems[i]\n        if (y.checked) {\n            checkedValues.push(y.value)\n        }\n    }\n    return checkedValues\n}\n\nfunction svgToMathCoords(svgX, svgY, r) {\n    const scale = rPxSize / r\n    return {\n        x: ((svgX - svgCenterX) / scale).toFixed(2),\n        y: ((svgCenterY - svgY) / scale).toFixed(2)\n    }\n}\n\nfunction drawByClick(e) {\n    const r = rInput.value\n    const absoluteX = e.clientX\n    const absoluteY = e.clientY\n    const absolutePoint = svg.createSVGPoint()\n    absolutePoint.x = absoluteX\n    absolutePoint.y = absoluteY\n    const svgPoint = absolutePoint.matrixTransform(svg.getScreenCTM().inverse())\n    const svgX = svgPoint.x\n    const svgY = svgPoint.y\n\n    const coords = svgToMathCoords(svgX, svgY, r)\n\n    if (r === undefined || r === \"\") {\n        errorMessage(\"svgError\", undefined, \"Невозможно определить координаты точки! Введите R!\")\n    } else {\n        makeFetch(\"GET\", {x: coords.x, y: coords.y, r: r, drawByClick: true})\n    }\n\n}\n\n\nfunction sendPoint(e) {\n    e.preventDefault()\n    const regexp = /^[-+]?[0-9]*[.,][0-9]+$|^[-+]?[0-9]+$/\n    x = document.getElementById(\"inputX\").value;\n    yValues = initYvalues()\n    r = rInput.value;\n    let successX = true\n    let successY = true\n    let successR = true\n    if (x === undefined) {\n        errorMessage(\"xError\", \"inputX\", \"Введите X!\")\n        successX = false\n    }\n\n    if (yValues.length === 0) {\n        errorMessage(\"yError\", \"inputY\", \"Выберите Y!\")\n        successY = false\n    }\n    if (r === undefined) {\n        errorMessage(\"rError\", \"inputR\", \"Введите R!\")\n        successR = false\n    }\n\n    if (!regexp.test(x) && successY) {\n        errorMessage(\"xError\", \"inputX\", \"Введите X в правильном формате!\")\n        successY = false\n    }\n    if (!regexp.test(r) && successR) {\n        errorMessage(\"rError\", \"inputR\", \"Введите R в правильном формате!\")\n        successR = false\n    }\n\n    if (!(-3 <= x && x <= 3) && successY) {\n        errorMessage(\"xError\", \"inputX\", \"Введите значение X в пределах [-3;3]!\")\n        successY = false\n    }\n    if (!(1 <= r && r <= 4) && successR) {\n        errorMessage(\"rError\", \"inputR\", \"Введите значение R в пределах [1;4]!\")\n        successR = false\n    } else if (successX && successY && successR) {\n\n        for (let i = 0; i < yValues.length; i++) {\n            let y = yValues[i]\n            makeFetch(\"GET\", {x: x, y: y, r: r, drawByClick: false}, 'application/x-www-form-urlencoded')\n        }\n\n    }\n}\n\n\nfunction checkHit(x, y, r) {\n    return checkCircle(x, y, r) || checkTriangle(x, y, r) || checkRectangle(x, y, r);\n}\n\nfunction checkTriangle(x, y, r) {\n    if (x <= 0 && y >= 0) {\n        return x > y - r && y < x + r;\n    }\n    return false;\n}\n\nfunction checkRectangle(x, y, r) {\n    if (x <= 0 && y <= 0) {\n        return x > -r / 2 && y > -r;\n    }\n    return false;\n}\n\nfunction checkCircle(x, y, r) {\n    if (x >= 0 && y <= 0) {\n        return Math.pow(x, 2) + Math.pow(y, 2) <= Math.pow(r, 2);\n    }\n    return false;\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/webapp/index.js b/src/main/webapp/index.js
--- a/src/main/webapp/index.js	(revision ce348307d359d93738650239491229ba2f94634f)
+++ b/src/main/webapp/index.js	(date 1761052567911)
@@ -24,8 +24,8 @@
     rInput = document.getElementById("inputR")
     rInput.addEventListener("input", function (e) {
         const newR = e.target.value
-        if (newR === "" || isNaN(newR) || newR === undefined) return
-        if (rInput.value === "" || isNaN(rInput.value) || rInput.value === undefined) return;
+        if (newR === "" || isNaN(newR) || newR === undefined) x
+        if (rInput.value === "" || isNaN(rInput.value) || rInput.value === undefined) return
         changeRadius(previousR, newR)
         console.log(`evL previous: ${previousR}, new: ${newR}`)
         r = newR
